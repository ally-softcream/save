단축키 정리 {
    alt+shift+↓↓ = 복사 2
    ctrl+방향키: 한 단어씩 이동
}

타입 선택자 {
    rel - 전체 문서와 외부 소스와 연관 관계를 기술하는 특성
    전체 선택자: *
    아이디 선택자: #
    클래스 선택자: .
    s1 s2 - s1 요소에 직계 자식 요소인 s2를 선택
}

<시맨틱 요소>
태그의 의미만으로 용도를 짐작가능한 태그
flex나 grid를 배우게 된대..
우와..
쩐다

justify 명령어 {
    justify-content {
        주축에서 사용하는거
    }
}
align 명령어 {
    교차축에서 사용하는거
}
<<주축을 가로로 했을 경우>> {
    수평정렬이 justify
    수직정렬이 align
    }
<<주축을 세로로 했을 경우>> {
    수직정렬이 justify
    수평정렬이 align
    }

form 태그 {
    내부에 iframe 태그 같은걸 써서
    내부 홈페이지 만들 때 쓴다
    input 태그도 form 태그 안에서만 작동한다
}
button 태그 {
    타입을 꼭 설정해야 됨
    설정 안 하면 기본은 submit으로 설정된다
    아무 기능 없는 버튼은 button이라고 해주면 됨
}
input 태그 {
    무언가를 입력받을 때 쓰는 태그.
    태그의 타입에 따라 속성이 달라지고 기능도 달라진다
    address-주소
    datetime-연월일
    submit은 제출 reset은 초기화
}

checkbox과 radio {
    선택항목에 체크박스나 동그라미 만드는 거
    checkbox는 복수선택이 되고 radio는 중복선택이 불가능하다
    laber for의 값과 id의 값이 같으면 값을 눌러도 선택이 된다
}


iframe 태그 {
    inner 페이지를 따로 만들고
    해당 페이지가 iframe에 표시되도록 만든다
}

~자바스크립트~
var를 잘 안 씀
var 대신 let 또는 const를 사용하는 추세
예약어라고 해서 js에서 명령어등으로 쓰는 건 변수 이름으로 지정할 수 없다

복합대입 연산자 {
    x += y는
    x = x+y 랑 같으며 
    왼쪽의 x에 원래 x값에다가 y를 더한 값을 넣겠다는 말이다

    따라서
    let x = 2;
    let x = 3;
    x = x + y;
    document.write(x);
    하면 값이 5 나온다

    문자열에는 어떤 다른 타입을 더해도 문자열이 돼버린다
}
파라미터: 함수 안에서 쓰는 변수

그날 배운거 다 따로 정리해서 뒀음
노션 페이지에 /치고 코드 생성해서 따로 정리해보기

getElementById = 무조건 id로만 가져올 수 있다
querySelector = 뭐든 다 가져올수잇는데 id는 #써야하고 class는 .써야됨
그냥 이름을 적으면 그 이름인 태그를 가져온다

함수를 호출할 때는 괄호까지 붙여줘야 한다
예: 함수이름 one << x
함수이름 one() << 이렇게 선언하기
함수 눌렀을때 호출하는 단어(메소드): onclick(예: button onclick)

단어가 2개 이상 되면 앞글자를 대문자로 써줘야 한다!
예: querySelector (query 는 소문자 Selector는 맨앞이 대문자)

토글: 클래스가 존재하면 삭제해주고 존재하지 않으면 생성하는 메소드
이벤트 버블링: 

<제이쿼리>
{
    $(선택자.함수()) << 이런 식으로 쓴다
    타입선택자(요소선택자): html 태그 $(`h1`) 등
    여러 개의 태그선택: $(`요소1, 요소2`).css(`요소1`, `요소1`); 
    << 반드시 문자열로 들어가야만 한다
    . < class 선택자
    # < id 선택자
    * < 전체 선택자

    순수 자바스크립트 객체와 제이쿼리 객체는 다르다
    제이쿼리 함수를 쓰려면 앞에 나온 객체도 제이쿼리 객체여야 한다
    =제이쿼리 문법으로써라
}

section 태그와 div태그는 기능적으로 동일하다

*에 box-sizing: border-box를 줘야
전체 크기가 우리 눈에 보이는 픽셀과 같아진다

gap을 적용할 때 요소는 최소 2개가 있어야 하고
gap의 갯수는 요소보다 최소 1개가 적다

flex를 사용하면 f12 개발자도구를 사용해서 봤을 때 보라색영역으로 나온다
ㄴ정렬할 때 flex를 주구장창 쓰니 잘 공부해 둘 것